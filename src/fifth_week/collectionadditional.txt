For work with exceptions:
//try
//catch
//throw
//trows
//finally

Встроенные исключения Java
Существуют несколько готовых системных исключений. Большинство из них являются подклассами типа RuntimeException и их не нужно включать в список throws. Вот небольшой список непроверяемых исключений.

 • ArithmeticException - арифметическая ошибка, например, деление на нуль
 • ArrayIndexOutOfBoundsException - выход индекса за границу массива
 • ArrayStoreException - присваивание элементу массива объекта несовместимого типа
 • ClassCastException - неверное приведение
 • EnumConstantNotPresentException - попытка использования неопределённого значения перечисления
 • IllegalArgumentException - неверный аргумент при вызове метода
 • IllegalMonitorStateException - неверная операция мониторинга
 • IllegalStateException - некорректное состояние приложения
 • IllegalThreadStateException - запрашиваемая операция несовместима с текущим потоком
 • IndexOutofBoundsException - тип индекса вышел за допустимые пределы
 • NegativeArraySizeException - создан массив отрицательного размера
 • NullPointerException - неверное использование пустой ссылки
 • NumberFormatException - неверное преобразование строки в числовой формат
 • SecurityException - попытка нарушения безопасности
 • StringIndexOutOfBounds - попытка использования индекса за пределами строки
 • TypeNotPresentException - тип не найден
 • UnsupportedOperationException - обнаружена неподдерживаемая операция

Список проверяемых системных исключений, которые можно включать в список throws.

 • ClassNotFoundException - класс не найден
 • CloneNotSupportedException - попытка клонировать объект, который не реализует интерфейс Cloneable
 • IllegalAccessException - запрещен доступ к классу
 • InstantiationException - попытка создать объект абстрактного класса или интерфейса
 • InterruptedException - поток прерван другим потоком
 • NoSuchFieldException - запрашиваемое поле не существует
 • NoSuchMethodException - запрашиваемый метод не существует
 • ReflectiveOperationException - исключение, связанное с рефлексией



public static void foo() throws IOException{
    throw new IOException("My error") //своя ошибка
}

1. Написать класс Parking который описывает парковку на 16 мест. Со следующими методами:

public int park(Car car) — с помощью данного метода помещаем машину на парковку, и возвращаем номер парковочного места.
public Car leave(int place) — с помощью данного метода, убираем машину с парковки по номеру  парковочного места.
Если на парковке нет свободных мест, генерируем собственное исключение ParkFullException. В случае, если произойдет попытка освободить пустое место, генерируем собственное исключение PlaceIsNotBusyException.
2. Создаем класс Product, с параметрами:
 - Наименование
 - Цена
 При попытке устaновить отрицательную
 цену, выбросить собственное исключение
 BadPriceException.